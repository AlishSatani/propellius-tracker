"""All input for the `addReminder` mutation."""
input AddReminderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  remindAt: Datetime!
}

"""The output of our `addReminder` mutation."""
type AddReminderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was created by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  eq: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Not equal to the specified value."""
  ne: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTaskNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was deleted by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""All input for the `deleteTodayTasks` mutation."""
input DeleteTodayTasksInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `deleteTodayTasks` mutation."""
type DeleteTodayTasksPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  token: String
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addReminder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddReminderInput!
  ): AddReminderPayload

  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload
  deleteTodayTasks(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTodayTasksInput!
  ): DeleteTodayTasksPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  logout: LogoutPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload
  updateTaskStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskStatusInput!
  ): UpdateTaskStatusPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  currentUser: User

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  task(id: UUID!): Task

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksConnection
  user(id: UUID!): User
  userByEmail(email: String!): User
  userByUsername(username: String!): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type RegisterPayload {
  token: String
  user: User!
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value."""
  eq: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Not equal to the specified value."""
  ne: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Not included in the specified list."""
  notIn: [String!]
}

type Task {
  createdAt: Datetime
  description: String!
  dueDate: Date!
  id: UUID!
  isCompleted: Boolean!
  title: String!
  updatedAt: Datetime

  """Reads a single `User` that is related to this `Task`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `dueDate` field."""
  dueDate: Date

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `Task` object types. All fields are combined with a logical ‘and.’
"""
input TaskFilter {
  """Checks for all expressions in this list."""
  and: [TaskFilter!]

  """Filter by the object’s `dueDate` field."""
  dueDate: DateFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: TaskFilter

  """Checks for any expressions in this list."""
  or: [TaskFilter!]

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  createdAt: Datetime
  description: String!
  dueDate: Date!
  id: UUID
  isCompleted: Boolean
  title: String!
  updatedAt: Datetime
  user: TasksUserIdFkeyInput
  userId: UUID
}

"""The fields on `task` to look up the row to update."""
input TaskOnTaskForTasksUserIdFkeyUsingTasksPkeyUpdate {
  id: UUID!

  """
  An object where the defined keys will be set on the `task` being updated.
  """
  patch: updateTaskOnTaskForTasksUserIdFkeyPatch!
}

"""Represents an update to a `Task`. Fields that are set will be updated."""
input TaskPatch {
  description: String
  dueDate: Date
  isCompleted: Boolean
  title: String
  user: TasksUserIdFkeyInput
  userId: UUID
}

"""The fields on `task` to look up the row to connect."""
input TaskTasksPkeyConnect {
  id: UUID!
}

"""The fields on `task` to look up the row to delete."""
input TaskTasksPkeyDelete {
  id: UUID!
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """A list of `Task` objects."""
  nodes: [Task!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int!
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task!
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  DUE_DATE_ASC
  DUE_DATE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Input for the nested mutation of `user` in the `TaskInput` mutation."""
input TasksUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectByEmail: UserUsersEmailKeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUsersPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByUsername: UserUsersUsernameKeyConnect

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByEmail: UserOnTaskForTasksUserIdFkeyUsingUsersEmailKeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnTaskForTasksUserIdFkeyUsingUsersPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByUsername: UserOnTaskForTasksUserIdFkeyUsingUsersUsernameKeyUpdate
}

"""Input for the nested mutation of `task` in the `UserInput` mutation."""
input TasksUserIdFkeyInverseInput {
  """The primary key(s) for `task` for the far side of the relationship."""
  connectById: [TaskTasksPkeyConnect!]

  """
  A `TaskInput` object that will be created and connected to this object.
  """
  create: [TasksUserIdFkeyTasksCreateInput!]

  """The primary key(s) for `task` for the far side of the relationship."""
  deleteById: [TaskTasksPkeyDelete!]

  """
  Flag indicating whether all other `task` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) and patch data for `task` for the far side of the relationship.
  """
  updateById: [TaskOnTaskForTasksUserIdFkeyUsingTasksPkeyUpdate!]
}

"""The `task` to be created by this mutation."""
input TasksUserIdFkeyTasksCreateInput {
  createdAt: Datetime
  description: String!
  dueDate: Date!
  id: UUID
  isCompleted: Boolean
  title: String!
  updatedAt: Datetime
  user: TasksUserIdFkeyInput
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  eq: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Not equal to the specified value."""
  ne: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  patch: TaskPatch!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Task` that was updated by this mutation."""
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

"""All input for the `updateTaskStatus` mutation."""
input UpdateTaskStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
  isCompleted: Boolean!
}

"""The output of our `updateTaskStatus` mutation."""
type UpdateTaskStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  task: Task

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksEdge

  """Reads a single `User` that is related to this `Task`."""
  user: User
}

type User {
  createdAt: Datetime!
  email: String!
  id: UUID!

  """Reads and enables pagination through a set of `Task`."""
  tasks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TaskFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): TasksConnection!
  updatedAt: Datetime!
  username: String
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `tasks` relation."""
  tasks: UserToManyTaskFilter

  """Some related `tasks` exist."""
  tasksExist: Boolean

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""The fields on `user` to look up the row to update."""
input UserOnTaskForTasksUserIdFkeyUsingUsersEmailKeyUpdate {
  email: String!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTaskForTasksUserIdFkeyPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnTaskForTasksUserIdFkeyUsingUsersPkeyUpdate {
  id: UUID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTaskForTasksUserIdFkeyPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnTaskForTasksUserIdFkeyUsingUsersUsernameKeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  patch: updateUserOnTaskForTasksUserIdFkeyPatch!
  username: String!
}

"""
A filter to be used against many `Task` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyTaskFilter {
  """
  Every related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TaskFilter

  """
  No related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TaskFilter

  """
  Some related `Task` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TaskFilter
}

"""The fields on `user` to look up the row to connect."""
input UserUsersEmailKeyConnect {
  email: String!
}

"""The fields on `user` to look up the row to connect."""
input UserUsersPkeyConnect {
  id: UUID!
}

"""The fields on `user` to look up the row to connect."""
input UserUsersUsernameKeyConnect {
  username: String!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""
An object where the defined keys will be set on the `task` being updated.
"""
input updateTaskOnTaskForTasksUserIdFkeyPatch {
  description: String
  dueDate: Date
  isCompleted: Boolean
  title: String
  user: TasksUserIdFkeyInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnTaskForTasksUserIdFkeyPatch {
  tasks: TasksUserIdFkeyInverseInput
}
